//below is the code of data base connection//

package databaseconnection.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;

public class Testjdbc {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String jdbcUrl = "jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC";
		String user = "hbstudent";
		String pass = "i am leaving blank {just showing.:)}";
		
		try {
			System.out.println("Connecting to database: " + jdbcUrl);
			
			Connection myConn =
					DriverManager.getConnection(jdbcUrl, user, pass);
			
			System.out.println("Connection successful!!!");
			
		}
		catch (Exception exc) {
			exc.printStackTrace();
		}

	}



// below is the code for entity  mapping with datebase table



package database.hibernate.demo;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;


@Entity
@Table(name="student")
public class Student {
	
@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
@Column(name="id")
private int id;
	
@Column(name="first_name")
private String firstName;

@Column(name="last_name")
private String lastName;

@Column(name="email")
private String email;
	
public Student(){
	
}

public Student(String firstName, String lastName, String email) {
	super();
	this.firstName = firstName;
	this.lastName = lastName;
	this.email = email;
}

public int getId() {
	return id;
}

public void setId(int id) {
	this.id = id;
}

public String getFirstName() {
	return firstName;
}

public void setFirstName(String firstName) {
	this.firstName = firstName;
}

public String getLastName() {
	return lastName;
}

public void setLastName(String lastName) {
	this.lastName = lastName;
}

public String getEmail() {
	return email;
}

public void setEmail(String email) {
	this.email = email;
}

@Override
public String toString() {
	return "Student [id=" + id + ", firstName=" + firstName + ", lastName=" + lastName + ", email=" + email + "]";
}
	

}

// below is the code for creating and saving data in database

package main.hibernate.demo;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import com.luv2code.hibernate.demo.Student;

public class CreateStudentDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
//create sessionFactory
   SessionFactory factory= new Configuration()
                           .configure("hibernate.cfg.xml")
                           .addAnnotatedClass(Student.class)
                           .buildSessionFactory();
		
		
// create session
		
	Session session = factory.getCurrentSession();
	
	try {
		
		// use the session object to save the java object
		
		
	// create a new student object
		System.out.println("creating the object");
	Student tempStudent = new Student("aswin","Khatiwada", "aswin.khatiwada1@gmail.com");	
		
	// start a transaction
		session.beginTransaction();
			
		
		//save the student object  
	System.out.println("saaving the object");	
		session.save(tempStudent);
		
		// commit transaction
		session.getTransaction().commit();
		
	System.out.println("finally done!!");




// for reading //



package main.hibernate.demo;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import com.luv2code.hibernate.demo.Student;

public class ReadStudentDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
//create sessionFactory
   SessionFactory factory= new Configuration()
                           .configure("hibernate.cfg.xml")
                           .addAnnotatedClass(Student.class)
                           .buildSessionFactory();
		
		
// create session
		
	Session session = factory.getCurrentSession();
	
	try {
		
		// use the session object to save the java object
		
		
	// create a new student object
		System.out.println("creating the object");
	Student tempStudent = new Student("Barcelona","Fan", "Barcelona.fan@gmail.com");	
		
	// start a transaction
		session.beginTransaction();
			
		
		//save the student object
	System.out.println("saaving the object");	
	System.out.println(tempStudent);
		session.save(tempStudent);
		
		// commit transaction
		session.getTransaction().commit();
		
		
		// My new code
		
		
// findout the student id with it's Primary key
	System.out.println("saved student.Generated ID" + tempStudent.getId());
	
	// now generate the new session
	session = factory.getCurrentSession();
	session.beginTransaction();
	
	// now retrieve the object knowing the primary key i.e ID
	System.out.println("getting student id"+ tempStudent.getId());
	Student mystudnet= session.get(Student.class,tempStudent.getId());
	System.out.println("get complete"+ mystudnet);
	
	// commit the transaction
	session.getTransaction().commit();
	
	
	System.out.println("finally done!!");
		
	}
	
	finally {
		factory.close();
	}
		
	}

}


// FOR updating,,//

package main.hibernate.demo;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import com.luv2code.hibernate.demo.Student;

public class UpdateStudentDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
//create sessionFactory
   SessionFactory factory= new Configuration()
                           .configure("hibernate.cfg.xml")
                           .addAnnotatedClass(Student.class)
                           .buildSessionFactory();
		
		
// create session
		
	Session session = factory.getCurrentSession();
	
	try {
		int studentId = 1;
		
		// now get a new session and start transaction
		session = factory.getCurrentSession();
		session.beginTransaction();
		
		// retrieve student based on the id: primary key
		System.out.println("\nGetting student with id: " + studentId);
		
		Student myStudent = session.get(Student.class, studentId);
		
		System.out.println("Updating student...");
		myStudent.setFirstName("Scooby");
		
		// commit the transaction
		session.getTransaction().commit();
		

		// NEW CODE
		
		session = factory.getCurrentSession();
		session.beginTransaction();
		
		// update email for all students
		System.out.println("Update email for all students");
		
		session.createQuery("update Student set email='foo@gmail.com'")
			.executeUpdate();
					
		// commit the transaction
		session.getTransaction().commit();

	
	
	System.out.println("finally done!!");
		
	}
	
	finally {
		factory.close();
	}
		
	}

}


// FOR querying//

package main.hibernate.demo;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import com.luv2code.hibernate.demo.Student;

public class QueryStudentDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
//create sessionFactory
   SessionFactory factory= new Configuration()
                           .configure("hibernate.cfg.xml")
                           .addAnnotatedClass(Student.class)
                           .buildSessionFactory();
		
		
// create session
		
	Session session = factory.getCurrentSession();
	
	try {
		
	
	// start a transaction
		session.beginTransaction();
			
	//query the Student
		
	List<Student> theStudents=session.createQuery("from Student").getResultList();
	
     //display the Student
	
	displaystudents(theStudents);
	

	// query student: last name ="Messi"
	theStudents = session.createQuery("from Student s where s.lastName= 'messi'").getResultList();
	      
	System.out.println("the last name is 'messi'");
			displaystudents(theStudents);
			
			
			theStudents = session.createQuery("from Student s where" +" s.lastName= 'messi' OR s.firstName='lionel,'").getResultList();		
			System.out.println("print the data that is start with the first and lastName");
			displaystudents(theStudents);
			
			
			theStudents = session.createQuery("from Student s where" +" s.email LIKE '%gmail.com'").getResultList();		
			System.out.println("print the data that email ends with gmail.com");
			displaystudents(theStudents);
			
			
			
			
		// commit transaction
		session.getTransaction().commit();
		
	System.out.println("finally done!!");
		
	}
	
	finally {
		factory.close();
	}
		
	}

	private static void displaystudents(List<Student> theStudents) {
		for(Student tempStudent:theStudents) {
			System.out.println(tempStudent);	
		}
	}

}


// FOR delete//



package main.hibernate.demo;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import com.luv2code.hibernate.demo.Student;

public class DeleteStudentDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
//create sessionFactory
   SessionFactory factory= new Configuration()
                           .configure("hibernate.cfg.xml")
                           .addAnnotatedClass(Student.class)
                           .buildSessionFactory();
		
		
// create session
		
	Session session = factory.getCurrentSession();
	
	try {
		int studentId = 1;
		
		// now get a new session and start transaction
		session = factory.getCurrentSession();
		session.beginTransaction();
		
		//retrieve student based on the id: primary key
		System.out.println("\nGetting student with id: " + studentId);
		
		Student myStudent = session.get(Student.class, studentId);
	

		// deleting the studentid=1
				
       // System.out.println("Deleting student:" + myStudent);  
		//session.delete(myStudent);
		

		// delete student id=2
		System.out.println("Deleting student id=2");
		session.createQuery("delete from Student where id=2").executeUpdate();
		
		
		// commit the transaction
				session.getTransaction().commit();
				
	
	
	System.out.println("finally done!!");
		
	}
	
	finally {
		factory.close();
	}
		
	}

}






